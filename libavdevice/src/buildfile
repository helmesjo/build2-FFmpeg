using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}
impl_libs += $config
import intf_libs += \
  libavutil%lib{avutil} \
  libavformat%lib{avformat}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{avdevice}: libul{avdevice}: \
                libavdevice/h{**} \
                $impl_libs $intf_libs

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
import [once] libconfig%buildfile{conditional-src}
import config_h = libconfig%h{autoconf}
import config_asm = libconfig%file{config.asm}

[rule_hint=c] \
libul{avdevice-meta}: $impl_libs $intf_libs
libua{avdevice}: enabled_source{avdevice}: \
                  libua{avdevice-meta} json{files.json} $config_h $config_asm \
                  libavdevice/{c h}{**} libavdevice/asm{**}

# these c files are included, not built.
libul{avdevice}: libavdevice/c{ \
                  outdev_list \
                  indev_list \
                }: include = adhoc

libavdevice/c{outdev_list}: libavdevice/c{alldevices} file{enabled_defines}
{{
  diag generate ($>)

  s = $path($<[0])     # Source file.
  f = $path($>)        # Target file.
  cat $path($<[1]) | set -w enabled_defines [string_set]
  pattern = "FFOutputFormat"
  thing = "outdev"
  struct_name = "FFOutputFormat"
  name = "outdev_list"

  sed -n -e "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_demuxer/p" $s | set -n codec_LIST
  echo "static const $struct_name * const $name[] = {" > $f
  for c: $codec_LIST
    group = $string.ucase(CONFIG_$c)
    if ($enabled_defines[$group])
      echo "    &ff_$c," >> $path($>)
    end
  end
  echo "    NULL };" >> $path($>)
}}
  
libavdevice/c{indev_list}: libavdevice/c{alldevices} file{enabled_defines}
{{
  diag generate ($>)

  s = $path($<[0])     # Source file.
  f = $path($>)        # Target file.
  cat $path($<[1]) | set -w enabled_defines [string_set]
  pattern = "FFInputFormat"
  thing = "indev"
  struct_name = "FFInputFormat"
  name = "indev_list"

  sed -n -e "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_muxer/p" $s | set -n codec_LIST
  echo "static const $struct_name * const $name[] = {" > $f
  for c: $codec_LIST
    group = $string.ucase(CONFIG_$c)
    if ($enabled_defines[$group])
      echo "    &ff_$c," >> $path($>)
    end
  end
  echo "    NULL };" >> $path($>)
}}

# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" "-I$src_pfx/libavdevice/" -DBUILDING_avdevice -Dav_export_libavdevice

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib \
                gdi32.lib \
                mfuuid.lib \
                ole32.lib \
                oleaut32.lib \
                psapi.lib \
                secur32.lib \
                shell32.lib \
                shlwapi.lib \
                strmiids.lib \
                user32.lib \
                uuid.lib \
                vfw32.lib \
                ws2_32.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.id)
{
  case 'msvc'
  {
    c.coptions += -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

libs{avdevice}: def{avdevice}: include = ($c.target.system == 'win32-msvc')
def{avdevice}: libul{avdevice}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avdevice}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

if ($c.target.system == 'win32-msvc')
{
  liba{avdevice}:
  {
    c.export.poptions += -Dav_export_libavdevice=
  }
  libs{avdevice}:
  {
    c.export.poptions += -Dav_export_libavdevice=__declspec\(dllimport\)
  }
}
else
{
  lib{avdevice}:
  {
    c.export.poptions += -Dav_export_libavdevice=
  }
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avdevice}: bin.lib.version = "-$version.project_id"
else
  lib{avdevice}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
