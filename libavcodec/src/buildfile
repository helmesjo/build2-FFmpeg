intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import intf_libs += \
  libavutil%lib{avutil}

import impl_libs += \
  libavutil%lib{config} \
  libswresample%lib{swresample}

import! config += \
  libavutil%lib{config}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

HEADERS = ac3_parser.h                                                  \
          adts_parser.h                                                 \
          avcodec.h                                                     \
          avdct.h                                                       \
          avfft.h                                                       \
          bsf.h                                                         \
          codec.h                                                       \
          codec_desc.h                                                  \
          codec_id.h                                                    \
          codec_par.h                                                   \
          d3d11va.h                                                     \
          defs.h                                                        \
          dirac.h                                                       \
          dv_profile.h                                                  \
          dxva2.h                                                       \
          jni.h                                                         \
          mediacodec.h                                                  \
          packet.h                                                      \
          qsv.h                                                         \
          vdpau.h                                                       \
          version.h                                                     \
          version_major.h                                               \
          videotoolbox.h                                                \
          vorbis_parser.h

OBJS = ac3_parser.c                                                     \
       adts_parser.c                                                    \
       allcodecs.c                                                      \
       avcodec.c                                                        \
       avdct.c                                                          \
       avfft.c                                                          \
       avpacket.c                                                       \
       bitstream.c                                                      \
       bitstream_filters.c                                              \
       bsf.c                                                            \
       codec_desc.c                                                     \
       codec_par.c                                                      \
       d3d11va.c                                                        \
       decode.c                                                         \
       dirac.c                                                          \
       dv_profile.c                                                     \
       encode.c                                                         \
       get_buffer.c                                                     \
       imgconvert.c                                                     \
       jni.c                                                            \
       mathtables.c                                                     \
       mediacodec.c                                                     \
       mpeg12framerate.c                                                \
       options.c                                                        \
       parser.c                                                         \
       parsers.c                                                        \
       profiles.c                                                       \
       qsv_api.c                                                        \
       raw.c                                                            \
       refstruct.c                                                      \
       utils.c                                                          \
       version.c                                                        \
       vlc.c                                                            \
       vorbis_parser.c                                                  \
       xiph.c

define [see_through] impl_target: group

lib{avcodec}: libul{avcodec}: \
              libavcodec/impl_target{avcodec} \
              libavcodec/h{**} \
              libavcodec/c{$OBJS} \
              $impl_libs $intf_libs
libul{avcodec}: libavcodec/c{ \
                  bsf_list \
                  codec_list \
                  parser_list \
                }: include = adhoc

libul{avcodec}: libavcodec/arm/{h c}{**}: include = ($cpu == 'arm')
libul{avcodec}: libavcodec/aarch64/{h c}{**}: include = ($cpu == 'aarch64')
libul{avcodec}: libavcodec/x86/{h c}{**}: include = $regex.match($cpu, 'i[3-6]86')
libul{avcodec}: libavcodec/{h c}{macos_*}: include = $tgt_macos

makefile = "$src_base/libavcodec/Makefile"
libavcodec/impl_target{avcodec}: $config file{$makefile} $impl_libs $intf_libs
{{
  o = [dir_path] $directory($>[0])
  t = [dir_path] $directory($makefile)
  c1 = [path] $path(h{$($config: out_base)/config_components.h})
  c2 = [path] $path(h{$($config: out_base)/config.h})
  d = "$o/av_conditional.files"

  # extract all enabled (1) CONFIG_XXX
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/"\1"/p' $c1 \
    | set -w ENABLED_COMPONENTS [string_set]
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/"\1"/p' $c2 \
    | set -w ENABLED_CONFIGS [string_set]

  #  extract all conditional source files form makefile,
  ## & split to json: '{"CONFIG_XXX": "all.o extra.o sources.o"}'
  cat $makefile \
    | set COND_SRC [string_set]
  COND_SRC = [strings] ($regex.merge($COND_SRC, '[ ]*\\\n[ ]*', ' '))
  echo $COND_SRC \
          | sed -n -e 's/^OBJS-\$\((CONFIG_[A-Z0-9_]+)\)[ +=]+(.*)/{"\1": "\2"}/p' \
          | set -n COND_SRC [strings]

  ADD_SRC = [strings]
  # iterate conditional files, check if enabled, extract extra files, append to list.
  for str: [strings] ($COND_SRC)
    pair = [json_object] $json.parse($str)
    cfg = $member_name($pair)
    if ($ENABLED_COMPONENTS[\"$cfg\"] || $ENABLED_CONFIGS[\"$cfg\"])
      ADD_SRC += [strings] $member_value($pair)
    end
  end

  # TODO: DEAL WITH $empty($ADD_SRC) case
  echo $ADD_SRC \
    | sed -n -e 's/\.o/.c/gp' \
    | set -w ADD_SRC [paths]

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'conditional source files' \
    --format lines \
    --file "$d" \
    -- \
      echo ($ADD_SRC) | tr ' ' '\n' >$d &!$d

  diag src ($>)
  cat $d | for -n file
    cp $path.posix_string($t/$file) $path.posix_string($o/$file)
  end
}}

libavcodec/c{codec_list}: libavcodec/c{allcodecs}
{{
  diag generate ($>)

  s = $path($<)        # Source file.
  f = $path($>)        # Target file.
  pattern = "FFCodec"
  thing = "parser"
  struct_name = "FFCodec"
  name = "codec_list"

  sed -n -e "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_$thing/p" $s | set -n codec_LIST
  # assert ($size($codec_LIST) > 0)
  echo "static const $struct_name * const $name[] = {" > $f
  for c: $codec_LIST
    # if enabled $c; then
      echo "    &ff_$c," >> $path($>)
    # fi
  end
  echo "    NULL };" >> $path($>)
}}

libavcodec/c{parser_list}: libavcodec/c{allcodecs}
{{
  diag generate ($>)

  s = $path($<)        # Source file.
  f = $path($>)        # Target file.
  pattern = "AVCodecParser"
  thing = "parser"
  struct_name = "AVCodecParser"
  name = "parser_list"

  sed -n -e "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_$thing/p" $s | set -n parser_LIST
  # assert ($size($parser_LIST) > 0)
  echo "static const $struct_name * const $name[] = {" > $f
  for c: $parser_LIST
    # if enabled $c; then
      echo "    &ff_$c," >> $path($>)
    # fi
  end
  echo "    NULL };" >> $path($>)
}}

libavcodec/c{bsf_list}: libavcodec/c{allcodecs}
{{
  diag generate ($>)
  s = $path($<)        # Source file.
  f = $path($>)        # Target file.
  pattern = "FFBitStreamFilter"
  thing = "bsf"
  struct_name = "FFBitStreamFilter"
  name = "bitstream_filters"

  sed -n -e "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_$thing/p" $s | set -n bsf_LIST
  # assert ($size($bsf_LIST) > 0)
  echo "static const $struct_name * const $name[] = {" > $f
  for c: $bsf_LIST
    # if enabled $c; then
      echo "    &ff_$c," >> $path($>)
    # fi
  end
  echo "    NULL };" >> $path($>)
}}

libs{avcodec}: def{avcodec}: include = ($c.target.system == 'win32-msvc')
def{avcodec}: libul{avcodec}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.coptions =+ -wd4018 -wd4146 -wd4244 -wd4305 \
              -wd4554 \
              -wd4005 \
              -wd4244 -wd4127 -wd4018 -wd4389     \
              -wd4146 -wd4057 -wd4204 -wd4706 -wd4305 \
              -wd4152 -wd4324 -we4013 -wd4100 -wd4214 \
              -wd4307 \
              -wd4273 -wd4554 -wd4701 -wd4703
c.poptions =+ "-I$out_pfx" "-I$src_pfx" -DBUILDING_avcodec -DCONFIG_SHARED "-I$src_pfx/libavcodec"

# System libraries
sys_libs =
# switch $c.target.class, $c.target.system
# {
#   case 'windows', 'win32-msvc'
#     sys_libs += bcrypt.lib
#   case 'windows', 'mingw32'
#     sys_libs += -lbcrypt
# }
# c.libs += $sys_libs

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avcodec}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx" -DCONFIG_AVCODEC
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avcodec}: bin.lib.version = "-$version.project_id"
else
  lib{avcodec}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
