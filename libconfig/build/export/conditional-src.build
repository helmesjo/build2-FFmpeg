define [see_through] impl_target: group

define asm: file
asm{*}: extension = asm

define groups: file
groups{*}: extension = groups

if (!$defined(config))
  import config = libconfig%lib{config}
if (!$defined(config_h))
  import config_h = libconfig%h{config}
if (!$defined(libaconfig))
  import libaconfig = libconfig%liba{config}
if (!$defined(libsconfig))
  import libsconfig = libconfig%libs{config}

[rule_hint=c] \
libul{conditional-src-meta}: $impl_libs $intf_libs $config

<file{all_groups enabled_groups enabled_source}>: $config_h
{{
  o = [dir_path] $directory($>[0])

  configs = [path] $path($config_h)
  depdb hash $configs

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/[#define[ ]+([A-Z0-9_]+)[ ]+1$/\1/p' $configs \
    | set -w enabled_groups [string_set]
  sed -n -e 's/#define[ ]+([A-Z0-9_]+)[ ]+[0-1]$/\1/p' $configs \
    | set -w all_groups [string_set]

  enabled_groups += [string_set] OBJS

  enabled_source = [json_array]
  for str: [strings] $conditional_src
    pair = [json] $json.parse($str)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]

    filtered_srcs = [strings]
    for src: [paths] $srcs
      # if in an immediate subdir, treat as group 'ARCH_<DIR>', eg. 'ARCH_ARM'
      dir = $directory($src)
      dir = $regex.match($dir, '(.*)/', return_subs)
      arch_dir = $string.ucase("ARCH_$dir")
      have_dir = $string.ucase("HAVE_$dir")
      enabled = [bool] true
      for group: $groups
        if (!$enabled_groups[$group] && !$enabled_groups[$arch_dir] && !$enabled_groups[$have_dir])
          enabled = false
        end
      end
      if ($enabled)
        filtered_srcs += $src
      end
    end

    if (!$empty($filtered_srcs))
      enabled_source += [json_array] \
        "{\"$regex.merge($groups, '(.*)', '\1', ' ')\": \"$regex.merge($filtered_srcs, '(.*)', '\1', ' ')\"}"
    end
  end

  diag configure $>

  echo $all_groups >$path($>[0])
  echo $enabled_groups >$path($>[1])
  echo $enabled_source >$path($>[2])
}}

$project/impl_target{conditional-src}: file{enabled_groups enabled_source all_groups}: update = match
$project/impl_target{conditional-src}: $src_base/$name($project)/{c h hxx cxx}{**}
{{
  o = [dir_path] $directory($>)
  n = [name] $project
  s = [dir_path] $src_base/$n
  d = "$o/conditional_src.d"
  enabled_source = [json] $json.load($path($<[1]))

  # append enabled sources
  SRCS = [paths]
  for i: $integer_sequence(0, $json.array_size($enabled_source))
    line = [string] ($enabled_source[$i])
    pair = [json] $json.parse($line)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]
    for src: [paths] $srcs
      if ($extension($src) != 'asm')
        SRCS += [paths] $path.posix_representation($src)
      end
    end
  end

  HDRS = [paths] $filesystem.path_search('**.h', $s)
  SRCS_ALL = [paths] $filesystem.path_search('**.c', $s)

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted source' \
    --target-extension-type 'cpp=cxx' \
    --format lines \
    --file "$d" \
    -- \
      echo ($SRCS $HDRS) | tr ' ' '\n' >$d && \
      echo '' >>$d && echo $path.representation([dir_path] $o) >>$d

  diag src ($>)

  for file: [paths] ($HDRS $SRCS $SRCS_ALL)
    src = $path.posix_string($s/$file)
    dst = $path.posix_string($o/$file)
    mkdir --no-cleanup --parents $directory($dst)
    cp $src $dst
  end
}}

$project/impl_target{conditional-asm-obja}: file{enabled_groups enabled_source} libua{conditional-src-meta}: update = match
$project/impl_target{conditional-asm-obja}: $src_base/$name($project)/asm{**}
{{
  o = [dir_path] $directory($>)
  n = [name] $project
  s = [dir_path] $src_base/$n
  d = "$o/conditional_asm_obja.files"
  lib_poptions = $c.lib_poptions(libua{conditional-src-meta}, obja)
  depdb hash $lib_poptions

  cat $path($<[0]) | set -w enabled_groups [string_set]
  enabled_source = [json] $json.load($path($<[1]))

  # append enabled sources
  SRCS = [paths]
  for i: $integer_sequence(0, $json.array_size($enabled_source))
    line = [string] ($enabled_source[$i])
    pair = [json] $json.parse($line)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]
    for src: [paths] $srcs
      if ($extension($src) == 'asm')
        SRCS += [paths] $path.base($src).obja
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'obja=obja' \
    --format lines \
    --file "$d" \
    -- \
      echo ($d $SRCS) | tr ' ' '\n' >$d && \
      echo '' >>$d && echo $path.representation([dir_path] $o) >>$d

  diag yasm ($>)

  for file: [paths] $SRCS
    src = $path.posix_string($s/$path.base($file).asm)
    dst = $path.posix_string($o/$file)
    mkdir --parents $directory($dst)
    yasm "-I$out_base" "-I$src_base" -f win64 --arch=x86 "-Pconfig.asm" \
          $c.poptions $lib_poptions -o $dst $src
  end
  touch $d
}}

$project/impl_target{conditional-asm-objs}: file{enabled_groups enabled_source} libus{conditional-src-meta}: update = match
$project/impl_target{conditional-asm-objs}: $src_base/$name($project)/asm{**}
{{
  o = [dir_path] $directory($>)
  n = [name] $project
  s = [dir_path] $src_base/$n
  d = "$o/conditional_asm_objs.files"
  lib_poptions = $c.lib_poptions(libus{conditional-src-meta}, objs)
  depdb hash $lib_poptions

  enabled_source = [json] $json.load($path($<[1]))

  # append enabled sources
  SRCS = [paths]
  for i: $integer_sequence(0, $json.array_size($enabled_source))
    line = [string] ($enabled_source[$i])
    pair = [json] $json.parse($line)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]
    for src: [paths] $srcs
      if ($extension($src) == 'asm')
        SRCS += [paths] $path.base($src).objs
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'objs=objs' \
    --format lines \
    --file "$d" \
    -- \
      echo ($d $SRCS) | tr ' ' '\n' >$d && \
      echo '' >>$d && echo $path.representation([dir_path] $o) >>$d

  diag yasm ($>)

  for file: [paths] $SRCS
    src = $path.posix_string($s/$path.base($file).asm)
    dst = $path.posix_string($o/$file)
    mkdir --parents $directory($dst)
    yasm "-I$out_base" "-I$src_base" -f win64 --arch=x86 "-Pconfig.asm" \
          $c.poptions $lib_poptions -o $dst $src
  end
  touch $d
}}
