asm_libs = $impl_libs $intf_libs
define [see_through] impl_target: group

define asm: file
asm{*}: extension = asm

asm_format = [string_map]    \
  'linux-gnu-x86_64'@elf64   \
  'linux-gnu-i686'@elf32     \
  'linux-musl-x86_64'@elf64  \
  'linux-musl-i686'@elf32    \
  'linux-gnu-elbrus'@elf64   \
  'win32-msvc-x86_64'@win64  \
  'win32-msvc-i686'@win32    \
  'mingw32-x86_64'@win64     \
  'mingw32-i686'@win32       \
  'darwin-x86_64'@macho64    \
  'darwin-i686'@macho32      \
  'freebsd-x86_64'@elf64     \
  'freebsd-i686'@elf32       \
  'netbsd-x86_64'@elf64      \
  'netbsd-i686'@elf32        \
  'openbsd-x86_64'@elf64     \
  'openbsd-i686'@elf32       \
  'solaris-x86_64'@elf64     \
  'solaris-i686'@elf32

rc_target = [string_map]                \
  'win32-msvc-x86_64'@pe-x86-64         \
  'win32-msvc-i386'@pe-i386             \
  'mingw32-x86_64'@pe-x86-64            \
  'mingw32-i686'@pe-i386                \
  'linux-gnu-x86_64-elf64'@elf64-x86-64 \
  'linux-gnu-i386-elf32'@elf32-i386     \
  'linux-musl-x86_64'@elf64-x86-64      \
  'linux-musl-i686'@elf32-i386          \
  'linux-iamcu-elf32'@elf32-iamcu
  # 'generic-pdb'@pdb                   \
  # 'generic-elf64-little'@elf64-little \
  # 'generic-elf64-big'@elf64-big       \
  # 'generic-elf32-little'@elf32-little \
  # 'generic-elf32-big'@elf32-big       \
  # 'generic-srec'@srec                 \
  # 'generic-symbolsrec'@symbolsrec     \
  # 'generic-verilog'@verilog           \
  # 'generic-tekhex'@tekhex             \
  # 'generic-binary'@binary             \
  # 'generic-ihex'@ihex                 \
  # 'generic-plugin'@plugin

if (!$defined(autoconf_h))
  import autoconf_h = libconfig%h{autoconf}
if (!$defined(config_asm))
  import config_asm = libconfig%file{config.asm}

<file{all_groups enabled_groups enabled_source}>: $autoconf_h
{{
  o = [dir_path] $directory($>[0])

  configs = [path] $path($autoconf_h)
  depdb hash $configs

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/#[ ]*define[ ]+([A-Z0-9_]+)[ ]+1$/\1/p' $configs \
    | set -w enabled_groups [string_set]
  sed -n -e 's/#[ ]*define[ ]+([A-Z0-9_]+)[ ]+[0-1]$/\1/p' $configs \
    | set -w all_groups [string_set]

  enabled_groups += [string_set] OBJS ARCH_

  enabled_source = [json_array]
  skipped = [strings]
  for pair: [json] $conditional_src
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]

    filtered_srcs = [strings]
    for src: [paths] $srcs
      # if in an immediate subdir, treat as group 'ARCH_<DIR>', eg. 'ARCH_ARM'
      dir = $directory($src)
      dir = $regex.match($dir, '(.*)/', return_subs)
      arch_dir = $string.ucase("ARCH_$dir")
      have_dir = $string.ucase("HAVE_$dir")
      enabled = [bool] true
      for group: $groups
        negate = [bool] $string.starts_with($group, '!')
        if($negate)
          group = $string.replace($group, '!', '')
        end

        # check if group is enabled, either (eg.) 'HAVE_X86ASM', or for CPU specific 'ARCH_ARM'
        if ((!$enabled_groups[$group] || (!$enabled_groups[$arch_dir] && !$enabled_groups[$have_dir])) || $negate)
          enabled = false
          skipped += "$name($src)-\($group|$arch_dir|$have_dir)"
        end
      end
      if ($enabled)
        filtered_srcs += $src
      end
    end

    if (!$empty($filtered_srcs))
      enabled_source += [json_array] \
        "{\"$regex.merge($groups, '(.*)', '\1', ' ')\": \"$regex.merge($filtered_srcs, '(.*)', '\1', ' ')\"}"
    end
  end

  diag configure $>

  echo $skipped | for -w derp
    echo $derp
  end

  echo $all_groups >$path($>[0])
  echo $enabled_groups >$path($>[1])
  echo $enabled_source >$path($>[2])
}}

$project/impl_target{conditional-src}: file{enabled_source}: update = match
$project/impl_target{conditional-src}:
{{
  n = [name] $project
  d = [dir_path] $src_base
  o = [dir_path] $directory($>)
  s = [dir_path] $src_base/$n
  enabled_srcs = [json] $json.load($path($<[0]))

  # append enabled sources
  srcs = [paths]
  for line: $enabled_srcs
    pair = [json] $json.parse($line)
    echo $member_value($pair) | for -w src
      ext = $extension($src)
      if ($ext != 'asm' && $ext != 'rc')
        srcs += [paths] $src
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted source' \
    --target-extension-type 'cpp=cxx' \
    --format lines \
    -- echo $regex.merge($srcs, '(.*)', '\1', "$\n")

  diag src $>

  for file: [paths] $srcs
    src = [path] $s/$file
    dst = [path] $o/$file
    mkdir --no-cleanup --parents $directory($dst)
    cp $src $dst
  end
}}

[rule_hint=c] \
libul{conditional-src-meta}: $asm_libs

$project/impl_target{conditional-asm-obja}: file{enabled_source} libua{conditional-src-meta} $config_asm: update = match
$project/impl_target{conditional-asm-obja}:
{{
  n = [name] $project
  o = [dir_path] $directory($>)
  s = [dir_path] $src_base/$n
  enabled_srcs = [json] $json.load($path($<[0]))
  lib_poptions = $c.lib_poptions(libua{conditional-src-meta}, obja)
  depdb hash $lib_poptions

  # append enabled sources
  srcs = [paths]
  for line: $enabled_srcs
    pair = [json] $json.parse($line)
    echo $member_value($pair) | for -w src
      if ($extension($src) == 'asm')
        srcs += [paths] $path.base($src).obja
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --adhoc \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'obja=obja' \
    --format lines \
    -- echo $regex.merge(asm-obja.d $srcs, '(.*)', '\1', "$\n")

  diag nasm $>

  # phony for platforms without asm
  touch $o/asm-obja.d

  key = [string] "$c.target.system-$c.target.cpu"
  format = [string] ($asm_format[$key])
  for file: [paths] $srcs
    src = $s/$path.base($file).asm
    dst = $o/$file
    mkdir --parents $directory($dst)
    nasm -f $format "-P$path.posix_string($path($config_asm))" \
         $path.posix_string($c.poptions) \
         $path.posix_string($lib_poptions) \
         -o $path.posix_string($dst) $path.posix_string($src) 2>!
  end
}}

$project/impl_target{conditional-asm-objs}: file{enabled_source} libus{conditional-src-meta} $config_asm: update = match
$project/impl_target{conditional-asm-objs}:
{{
  n = [name] $project
  o = [dir_path] $directory($>)
  s = [dir_path] $src_base/$n
  enabled_srcs = [json] $json.load($path($<[0]))
  lib_poptions = $c.lib_poptions(libus{conditional-src-meta}, objs)
  depdb hash $lib_poptions

  # append enabled sources
  srcs = [paths]
  for line: $enabled_srcs
    pair = [json] $json.parse($line)
    echo $member_value($pair) | for -w src
      if ($extension($src) == 'asm')
        srcs += [paths] $path.base($src).objs
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --adhoc \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'objs=objs' \
    --format lines \
    -- echo $regex.merge(asm-objs.d $srcs, '(.*)', '\1', "$\n")

  diag nasm $>

  # phony for platforms without asm
  touch $o/asm-objs.d

  key = [string] "$c.target.system-$c.target.cpu"
  format = [string] ($asm_format[$key])
  for file: [paths] $srcs
    src = $s/$path.base($file).asm
    dst = $o/$file
    mkdir --parents $directory($dst)
    nasm -f $format "-P$path.posix_string($path($config_asm))" \
         $path.posix_string($c.poptions) \
         $path.posix_string($lib_poptions) \
         -o $path.posix_string($dst) $path.posix_string($src) 2>!
  end
}}

$project/impl_target{conditional-rc-obja}: file{enabled_source} libua{conditional-src-meta} $config_asm: update = match
$project/impl_target{conditional-rc-obja}:
{{
  n = [name] $project
  o = [dir_path] $directory($>)
  s = [dir_path] $src_base/$n
  enabled_srcs = [json] $json.load($path($<[0]))
  lib_poptions = $c.lib_poptions(libua{conditional-src-meta}, obja)
  depdb hash $lib_poptions

  # append enabled sources
  srcs = [paths]
  for line: $enabled_srcs
    pair = [json] $json.parse($line)
    echo $member_value($pair) | for -w src
      if ($extension($src) == 'rc')
        srcs += [paths] $path.base($src).obja
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --adhoc \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'obja=obja' \
    --format lines \
    -- echo $regex.merge(rc-obja.d $srcs, '(.*)', '\1', "$\n")

  diag rc $>

  # phony for platforms without rc
  touch $o/rc-obja.d

  key = [string] "$c.target.system-$c.target.cpu"
  target = [string] ($rc_target[$key])
  for file: [paths] $srcs
    src = [path] $s/$path.base($file).rc
    dst = [path] $o/$file
    mkdir --parents $directory($dst)
    windres $path.posix_string($c.poptions) \
            $path.posix_string($lib_poptions) \
            --target=$target -o $path.posix_string($dst) -i $path.posix_string($src) 2>!
  end
}}

$project/impl_target{conditional-rc-objs}: file{enabled_source} libus{conditional-src-meta} $config_asm: update = match
$project/impl_target{conditional-rc-objs}:
{{
  n = [name] $project
  o = [dir_path] $directory($>)
  s = [dir_path] $src_base/$n
  enabled_srcs = [json] $json.load($path($<[0]))
  lib_poptions = $c.lib_poptions(libus{conditional-src-meta}, objs)
  depdb hash $lib_poptions

  # append enabled sources
  srcs = [paths]
  for line: $enabled_srcs
    pair = [json] $json.parse($line)
    echo $member_value($pair) | for -w src
      if ($extension($src) == 'rc')
        srcs += [paths] $path.base($src).objs
      end
    end
  end

  depdb dyndep \
    --dyn-target \
    --adhoc \
    --target-cwd $o \
    --target-what 'extracted assembly' \
    --target-extension-type 'objs=objs' \
    --format lines \
    -- echo $regex.merge(rc-objs.d $srcs, '(.*)', '\1', "$\n")

  diag rc $>

  # phony for platforms without rc
  touch $o/rc-objs.d

  key = [string] "$c.target.system-$c.target.cpu"
  target = [string] ($rc_target[$key])
  for file: [paths] $srcs
    src = [path] $s/$path.base($file).rc
    dst = [path] $o/$file
    mkdir --parents $directory($dst)
    windres $path.posix_string($c.poptions) \
            $path.posix_string($lib_poptions) \
            --target=$target -o $path.posix_string($dst) -i $path.posix_string($src) 2>!
  end
}}
