define json: file
json{*}: extension = json

define asm: file
asm{*}: extension = asm

define rc: file
rc{*}: extension = rc

asm_format = [string_map]    \
  'linux-gnu-x86_64'@elf64   \
  'linux-gnu-i686'@elf32     \
  'linux-musl-x86_64'@elf64  \
  'linux-musl-i686'@elf32    \
  'linux-gnu-elbrus'@elf64   \
  'win32-msvc-x86_64'@win64  \
  'win32-msvc-i686'@win32    \
  'mingw32-x86_64'@win64     \
  'mingw32-i686'@win32       \
  'darwin-x86_64'@macho64    \
  'darwin-i686'@macho32      \
  'freebsd-x86_64'@elf64     \
  'freebsd-i686'@elf32       \
  'netbsd-x86_64'@elf64      \
  'netbsd-i686'@elf32        \
  'openbsd-x86_64'@elf64     \
  'openbsd-i686'@elf32       \
  'solaris-x86_64'@elf64     \
  'solaris-i686'@elf32

rc_target = [string_map]                \
  'win32-msvc-x86_64'@pe-x86-64         \
  'win32-msvc-i386'@pe-i386             \
  'mingw32-x86_64'@pe-x86-64            \
  'mingw32-i686'@pe-i386                \
  'linux-gnu-x86_64-elf64'@elf64-x86-64 \
  'linux-gnu-i386-elf32'@elf32-i386     \
  'linux-musl-x86_64'@elf64-x86-64      \
  'linux-musl-i686'@elf32-i386          \
  'linux-iamcu-elf32'@elf32-iamcu
  # 'generic-pdb'@pdb                   \
  # 'generic-elf64-little'@elf64-little \
  # 'generic-elf64-big'@elf64-big       \
  # 'generic-elf32-little'@elf32-little \
  # 'generic-elf32-big'@elf32-big       \
  # 'generic-srec'@srec                 \
  # 'generic-symbolsrec'@symbolsrec     \
  # 'generic-verilog'@verilog           \
  # 'generic-tekhex'@tekhex             \
  # 'generic-binary'@binary             \
  # 'generic-ihex'@ihex                 \
  # 'generic-plugin'@plugin


define [see_through] enabled_source: group
enabled_source{~'/(.+)/'}: json{~'/.+/'} libua{~'/\1-meta/'} h{~'/.+/'} asm{~'/.+/'}
{{
  o          = [dir_path] $directory($>)
  meta       = ($<[0])
  json       = ($<[1])
  config     = ($<[2])
  config_asm = ($<[3])

  lib_poptions = $c.lib_poptions($meta, obja)
  depdb hash $lib_poptions

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/#[ ]*define[ ]+([A-Z0-9_]+)[ ]+1$/\1/p' $path($config) \
    | set -w enabled_groups [string_set]
  sed -n -e 's/#[ ]*define[ ]+([A-Z0-9_]+)[ ]+[0-1]$/\1/p' $path($config) \
    | set -w all_groups [string_set]

  # prepend default groups
  enabled_groups += [string_set] OBJS ARCH_

  # iterate all files and filter out if the corresponding
  # group(s) isn't enabled
  enabled_srcs = [paths]
  skipped_srcs = [strings]
  json = [path] $path($json)
  for pair: [json] $json.load($json)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]

    filtered_srcs = [paths]
    for src: [paths] $srcs
      # if in an immediate subdir, treat as group 'ARCH_<DIR>', eg. 'ARCH_ARM'
      dir = $directory($src)
      dir = $regex.match($dir, '(.*)/', return_subs)
      arch_dir = $string.ucase("ARCH_$dir")
      have_dir = $string.ucase("HAVE_$dir")
      enabled = [bool] true
      for group: $groups
        negate = [bool] $string.starts_with($group, '!')
        if($negate)
          group = $string.replace($group, '!', '')
        end

        # check if group is enabled, either (eg.) 'HAVE_X86ASM', or for CPU specific 'ARCH_ARM'
        if ((!$enabled_groups[$group] || (!$enabled_groups[$arch_dir] && !$enabled_groups[$have_dir])) || $negate)
          enabled = false
          skipped_srcs += "$name($src)-\($group|$arch_dir|$have_dir)"
        end
      end
      if ($enabled)
        filtered_srcs += $project/$src
      end
    end

    if (!$empty($filtered_srcs))
      enabled_srcs += [paths] $filtered_srcs
    end
  end

  # add any header prerequisites so they also get
  # symlinked (to allow relative inclusion)
  hdrs = [paths] $path($filter($<, h))
  for i : $integer_sequence(2, $size($hdrs))
    src = [path] $relative($hdrs[$i], $src_base)
    enabled_srcs += [paths] $src
  end

  enabled_srcs = [paths] $regex.merge($enabled_srcs, '(.*)', '\1', "$\n")

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted source' \
    --target-extension-type 'asm=obja' \
    --format lines \
    -- echo $enabled_srcs

  diag filter $>

  for s : $skipped_srcs
    echo "skipped: $s" >!
  end

  echo $enabled_srcs | for -n f
    if($extension($f) != 'asm')
      s = [path] $src_base/$f
      d = [path] $out_base/$f
      rm -f $d
      mkdir --no-cleanup --parents $directory($d)
      ln --symbolic $s $d
    end
  end

  # compile assembly files
  key = [string] "$c.target.system-$c.target.cpu"
  format = [string] ($asm_format[$key])
  for i: $integer_sequence(1, $size($>))
    f = [path] $path($>[$i])
    if($extension($f) == 'asm')
      src = $src_base/$relative($f, $out_base)
      dst = $f
      mkdir --parents $directory($dst)
      echo "nasm $src"
      nasm -f $format "-P$path($config_asm)" \
           $c.poptions \
           $lib_poptions \
           -o $dst $src 2>!
    end
  end
}}
