using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libavutil%lib{config}
impl_libs += $config
import intf_libs += \
  libavutil%lib{avutil} \
  libswscale%lib{swscale}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{swresample}: libul{swresample}: \
              libswresample/h{**} \
              $impl_libs $intf_libs

conditional_src = [strings] \
  '{"OBJS":                     "aarch64/audio_convert_init.c aarch64/resample_init.c"}' \
  '{"OBJS":                     "arm/audio_convert_init.c arm/resample_init.c"}' \
  '{"HEADERS":                  "swresample.h version.h version_major.h"}'  \
  '{"OBJS":                     "audioconvert.c dither.c options.c rematrix.c resample.c resample_dsp.c swresample.c swresample_frame.c version.c"}'  \
  '{"SHLIBOBJS":                "log2_tab.c"}' \
  '{"OBJS":                     "x86/audio_convert_init.c x86/rematrix_init.c x86/resample_init.c"}' \
  '{"CONFIG_NEON_CLOBBER_TEST": "aarch64/neontest.c"}' \
  '{"CONFIG_NEON_CLOBBER_TEST": "arm/neontest.c"}' \
  '{"CONFIG_LIBSOXR":           "soxr_resample.c"}' \
  '{"HAVE_GNU_WINDRES":         "swresampleres.rc"}' \
  '{"CONFIG_XMM_CLOBBER_TEST":  "x86/w64xmmtest.c"}' \
  '{"OBJS":                     "aarch64/audio_convert_init.c aarch64/resample_init.c"}' \
  '{"HAVE_NEON":                "aarch64/audio_convert_neon.S aarch64/resample.S"}' \
  '{"OBJS":                     "arm/audio_convert_init.c arm/resample_init.c"}' \
  '{"HAVE_NEON":                "arm/audio_convert_neon.S arm/resample.S"}' \
  '{"HEADERS":                  "swresample.h version.h version_major.h"}'  \
  '{"OBJS":                     "audioconvert.c dither.c options.c rematrix.c resample.c resample_dsp.c swresample.c swresample_frame.c version.c"}'  \
  '{"SHLIBOBJS":                "log2_tab.c"}' \
  '{"HAVE_X86ASM":              "x86/audio_convert.asm x86/rematrix.asm x86/resample.asm"}' \
  '{"OBJS":                     "x86/audio_convert_init.c x86/rematrix_init.c x86/resample_init.c"}'


# conditional source & assembly
import [once] libavutil%buildfile{conditional-src}
libua{swresample}: libswresample/impl_target{conditional-asm-obja}
libus{swresample}: libswresample/impl_target{conditional-asm-objs}
libul{swresample}: libswresample/impl_target{conditional-src}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swresample

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.target.system)
{
  case 'win32-msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

libs{swresample}: def{swresample}: include = ($c.target.system == 'win32-msvc')
def{swresample}: libul{swresample}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{swresample}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swresample}: bin.lib.version = "-$version.project_id"
else
  lib{swresample}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
