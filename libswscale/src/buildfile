using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libavutil%lib{config}
impl_libs += $config
import intf_libs += libavutil%lib{avutil}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

define [see_through] impl_target: group

lib{swscale}: libul{swscale}: \
              libswscale/impl_target{swscale} \
              libswscale/h{**} \
              $impl_libs $intf_libs

# all_asm = [strings] \
#   '{"DISABLED HAVE_X86ASM":            "x86/cpuid.asm x86/emms.asm x86/fixed_dsp.asm x86/float_dsp.asm x86/imgutils.asm x86/lls.asm x86/tx_float.asm x86/x86inc.asm x86/x86util.asm"}' \
#   '{"DISABLED HAVE_X86ASM CONFIG_PIXELUTILS":      "x86/pixelutils.asm"}' \
#   '{"HAVE_AARCH64":           "aarch64/asm.S"}' \
#   '{"HAVE_AARCH64 HAVE_NEON": "aarch64/float_dsp_neon.S aarch64/tx_float_neon.S"}' \
#   '{"HAVE_ARM":               "arm/asm.S arm/float_dsp_vfp.S"}' \
#   '{"HAVE_ARM HAVE_NEON":     "arm/float_dsp_neon.S"}' \
#   '{"HAVE_RISCV":             "riscv/asm.S riscv/bswap_rvb.S riscv/fixed_dsp_rvv.S riscv/float_dsp_rvv.S"}'
all_srcs = [strings] \
  '{"OBJS HAVE_AARCH64": "aarch64/rgb2rgb.c aarch64/swscale.c.c aarch64/swscale_unscaled.c"}' \
  '{"OBJS": "alphablend.c hscale.c hscale_fast_bilinear.c gamma.c half2float.c input.c options.c output.c rgb2rgb.c slice.c swscale.c swscale_unscaled.c utils.c version.c yuv2rgb.c vscale.c"}' \
  '{"SHLIBOBJS": "log2_tab.c"}' \
  '{"OBJS HAVE_RISCV": "riscv/rgb2rgb.c"}' \
  '{"OBJS HAVE_X86": "x86/rgb2rgb.o x86/swscale.o x86/yuv2rgb.o"}' \
  '{"CONFIG_SWSCALE HAVE_LOONGSON3": "loongarch/swscale_lasx.c loongarch/input_lasx.c loongarch/yuv2rgb_lasx.c loongarch/rgb2rgb_lasx.c loongarch/output_lasx.c"}' \
  '{"CONFIG_SWSCALE HAVE_LOONGSON3": "loongarch/swscale.c loongarch/swscale_lsx.c loongarch/input.c loongarch/output.c loongarch/output_lsx.c loongarch/yuv2rgb_lsx.c"}' \
  '{"HAVE_GNU_WINDRES": "swscaleres.rc"}' \
  '{"CONFIG_XMM_CLOBBER_TEST": "x86/w64xmmtest.c"}'
# '{"TESTPROGS": "   swscale OBJS  ppc/swscale_altivec.c ppc/yuv2rgb_altivec.c ppc/yuv2yuv_altivec.c ppc/swscale_vsx.c"}' \

libswscale/impl_target{swscale}: $config libswscale/h{**} libswscale/c{**}
{{
  o = [dir_path] $directory($>)
  n = $name($o)
  s = [dir_path] $src_base/$n
  c1 = [path] $path(h{$($config: out_base)/config_components.h})
  c2 = [path] $path(h{$($config: out_base)/config.h})
  d = "$o/av_conditional.files"

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c1 \
    | set -w ENABLED_COMPONENTS [string_set]
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c2 \
    | set -w ENABLED_CONFIGS [string_set]
  sed -n -e 's/^#define[ ]+(HAVE_[A-Z0-9_]+)[ ]+1/\1/p' $c2 \
    | set -w ENABLED_HAVE [string_set]

  ENABLED_GROUPS = [string_set] ( \
    $ENABLED_CONFIGS \
    $ENABLED_COMPONENTS \
    $ENABLED_HAVE \
    OBJS \
    ARCH_ \
    ($regex.find_match($ENABLED_CONFIGS, 'HAVE_ARM.*') ? "arm" : '') \
  )

  # append enabled sources
  SRCS = [paths]
  OBJS = [paths]
  for str: [strings] ($all_asm $all_srcs)
    pair = [json] $json.parse($str)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]
    for src: [paths] $srcs
      enabled = [bool] true
      for group: $groups
        if (!$ENABLED_GROUPS[$group])
          enabled = false
        end
      end
      if ($enabled)
        if ($extension($src) != 'asm')
          SRCS += [paths] $path.posix_representation($src)
        else
          ASM += [paths] $path.posix_representation($path.base($src).asma)
          ASM += [paths] $path.posix_representation($path.base($src).asms)
        end
      end
    end
  end

  HDRS += [paths] $filesystem.path_search('**.h', $s)
  SRCS_ALL = [paths] $filesystem.path_search('**.c', $s)

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted source' \
    --target-extension-type 'cpp=cxx' \
    --target-extension-type 'asma=libua' \
    --format lines \
    --file "$d" \
    -- \
      echo ($SRCS $ASM) | tr ' ' '\n' >$d && \
      echo '' >>$d && echo $path.representation([dir_path] $o) >>$d

  diag src ($>)

  for file: [paths] ($HDRS $SRCS $SRCS_ALL)
    src = $path.posix_string($s/$file)
    dst = $path.posix_string($o/$file)
    mkdir --no-cleanup --parents $directory($dst)
    cp --no-cleanup $src $dst
  end
  # not sure if this will work without (supposedly required) yasm
  if (!$empty($MASM))
    ml = $directory($effect($c.path))/ml64.exe
    for file: $MASM
      src = [path] $path.posix_string($s/$path.base($file).asm)
      dst = [path] $path.posix_string($o/$file)
      mkdir --no-cleanup --parents $o/$directory($file)
      echo $c.poptions
      $ml -nologo -quiet "-I$path.posix_string($src_base)/libswscale" $c.poptions -Fo "$dst" -c "$src"
    end
  end
}}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swscale
objs{**}: c.poptions =+ -DCONFIG_SHARED

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.target.system)
{
  case 'win32-msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

libs{swscale}: def{swscale}: include = ($c.target.system == 'win32-msvc')
def{swscale}: libul{swscale}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{swscale}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swscale}: bin.lib.version = "-$version.project_id"
else
  lib{swscale}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
