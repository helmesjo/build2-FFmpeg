using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libavutil%lib{config}
impl_libs += $config
import intf_libs += libavutil%lib{avutil}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{swscale}: libul{swscale}: \
              libswscale/h{**} \
              $impl_libs $intf_libs

conditional_src = [strings] \
  '{"HAVE_X86ASM":               "x86/input.asm x86/output.asm x86/scale.asm x86/scale_avx2.asm x86/rgb_2_rgb.asm x86/yuv_2_rgb.asm x86/yuv2yuvX.asm"}' \
  '{"HEADERS":                   "swscale.c version.c version_major.h"}' \
  '{"OBJS":                      "alphablend.c hscale.c hscale_fast_bilinear.c gamma.c half2float.c input.c options.c output.c rgb2rgb.c slice.c swscale.c swscale_unscaled.c utils.c version.c yuv2rgb.c vscale.c"}' \
  '{"SHLIBOBJS":                 "log2_tab.c"}' \
  '{"HAVE_X86ASM":               "x86/rgb2rgb.c x86/swscale.c x86/yuv2rgb.c"}' \
  '{"HAVE_LOONG CONFIG_SWSCALE": "loongarch/swscale_init_loongarch.c"}' \
  '{"HAVE_LOONG CONFIG_SWSCALE": "loongarch/swscale_lasx.c loongarch/input_lasx.c loongarch/yuv2rgb_lasx.c loongarch/rgb2rgb_lasx.c loongarch/output_lasx.c"}' \
  '{"HAVE_LOONG CONFIG_SWSCALE": "loongarch/swscale.c loongarch/swscale_lsx.c loongarch/input.c loongarch/output.c loongarch/output_lsx.c loongarch/yuv2rgb_lsx.c"}' \
  '{"HAVE_GNU_WINDRES":          "swscaleres.rc"}' \
  '{"CONFIG_XMM_CLOBBER_TEST":   "x86/w64xmmtest.c"}' \
  '{"HAVE_AARCH64":              "aarch64/rgb2rgb.c aarch64/swscale.c aarch64/swscale_unscaled.c"}' \
  '{"HAVE_AARCH64 HAVE_NEON":    "aarch64/hscale.c aarch64/output.c aarch64/rgb2rgb_neon.S aarch64/yuv2rgb_neon.S"}' \
  '{"HAVE_ARM":                  "arm/swscale.c arm/swscale_unscaled.c"}' \
  '{"HAVE_ARM HAVE_NEON":        "arm/rgb2yuv_neon_32.S"}' \
  '{"HAVE_ARM HAVE_NEON":        "arm/rgb2yuv_neon_16.S"}' \
  '{"HAVE_ARM HAVE_NEON":        "arm/hscale.S arm/output.S arm/yuv2rgb_neon.S"}' \
  '{"HAVE_PPC":                  "ppc/swscale_altivec.c ppc/yuv2rgb_altivec.c ppc/yuv2yuv_altivec.c ppc/swscale_vsx.c"}' \
  '{"HAVE_RISCV":                "riscv/rgb2rgb.c"}' \
  '{"HAVE_RV":                   "riscv/rgb2rgb_rvb.S"}' \
  '{"HAVE_RVV":                  "riscv/rgb2rgb_rvv.S"}' \
  '{"HAVE_MMX":                  "x86/hscale_fast_bilinear_simd.c"}'

# conditional source & assembly
import [once] libavutil%buildfile{conditional-src}
libua{swscale}: libswscale/impl_target{conditional-asm-obja}
libus{swscale}: libswscale/impl_target{conditional-asm-objs}
libul{swscale}: libswscale/impl_target{conditional-src}
libul{swscale}: libswscale/file{patch_exports.d}:
{
  include = $tgt_win32
  update = match
}

libswscale/file{patch_exports.d}: libswscale/h{**}
{{
  o = [dir_path] $directory($>)
  all_headers = [paths] $path($<)

  HDRS = [paths]

  for hdr: [paths] $all_headers
    sed -n -e 's|^(extern .* [\S]*;)$|\1|gp' $hdr | set has_export
    if (!$empty($has_export) && $empty($has_include))
      HDRS += [paths] $hdr
    end
  end

  diag patch $>

  # fix symbol importation on MSVC of global variables
  echo >$path($>)
  for hdr: [paths] ($HDRS)
    echo "      $path.relative($hdr, $src_base)"
    echo $hdr >>$path($>)
    # insert 'av_export_swscale' before any global and explicitly 'extern' variables
    sed -i -e 's|^(extern .* [\S]*;)$|av_export_swscale \1|gp' $hdr
  end
}}

libul{swscale}: libswscale/c{ \
                  bayer_template \
                  x86/yuv2rgb_template \
                  x86/rgb2rgb_template \
                }: include = adhoc
# these c files are included, not built.
libswscale/c{bayer_template}:
{{
  diag copy $>
  o = $path($>)
  s = "$src_base/$path.relative($o, $out_base)"
  cp $s $o
}}
libswscale/x86/c{yuv2rgb_template}:
{{
  diag copy $>
  o = $path($>)
  s = "$src_base/$path.relative($o, $out_base)"
  cp $s $o
}}

libswscale/x86/c{rgb2rgb_template}:
{{
  diag copy $>
  o = $path($>)
  s = "$src_base/$path.relative($o, $out_base)"
  cp $s $o
}}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swscale

obj{**}: c.poptions += -Dav_export_swscale=

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.target.system)
{
  case 'win32-msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

libs{swscale}: def{swscale}: include = ($c.target.system == 'win32-msvc')
def{swscale}: libul{swscale}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{swscale}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx" "-Dav_export_swscale=__declspec\(dllimport\)"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swscale}: bin.lib.version = "-$version.project_id"
else
  lib{swscale}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
