using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}
impl_libs += $config
import intf_libs += libavutil%liba{avutil}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{swscale}: libul{swscale}: \
              libswscale/h{**} \
              $impl_libs $intf_libs

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
import config_h = libconfig%h{autoconf}
import config_asm = libconfig%file{config.asm}

[rule_hint=c] \
libul{swscale-meta}: $impl_libs $intf_libs $config_asm
libua{swscale}: enabled_source{swscale}
file{enabled_defines}: $config_h: update = match
libua{swscale}: enabled_source{swscale}: file{enabled_defines} libua{swscale-meta} json{files.json} \
                                       $config_h $config_asm libswscale/h{**}: \
                                       update = match

# these c files are included, not built.
libul{swscale}: libswscale/c{**_template}: include = adhoc

# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swscale -Dav_export_libswscale=

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.id)
{
  case 'msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

libs{swscale}: def{swscale}: include = ($c.target.system == 'win32-msvc')
def{swscale}: libul{swscale}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{swscale}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

if ($c.target.system == 'win32-msvc')
{
  liba{swscale}:
  {
    c.export.poptions += -Dav_export_libswscale=
  }
  libs{swscale}:
  {
    c.export.poptions += -Dav_export_libswscale=__declspec\(dllimport\)
  }
}
else
{
  lib{swscale}:
  {
    c.export.poptions += -Dav_export_libswscale=
  }
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swscale}: bin.lib.version = "-$version.project_id"
else
  lib{swscale}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
