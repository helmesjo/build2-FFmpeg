using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')
c_coptions = [string] ($c.coptions != [null] ? $regex.merge($c.coptions, '(.+)', '\1 ') : '')

lib{avutil}: libul{avutil}: \
               libavutil/{h c}{* -avconfig -config -ffversion \
                                 -*cuda* \
                                 -hwcontext_* \
                                 -native_* \
                                 -*vulkan* \
                                 -macos_* \
                                 -tx_template.c \
                               } \
               libavutil/h{avconfig ffversion} h{config} \
               $impl_libs $intf_libs

# Architecture specific source
switch $c.target.cpu: regex.match
{
  case 'i[3-6]86'
    libul{avutil}: libavutil/x86/{h c}{*}
  case 'aarch64'
    libul{avutil}: libavutil/aarch64/{h c}{*}
}

# Win32
libul{avutil}: compat/windows/{h c}{*} compat/{h c}{w32*}: include = $tgt_win32

# GCC

# MacOS
libul{avutil}: libavutil/{h c}{macos_*}: include = $tgt_macos

libs{avutil}: def{avutil}: include = ($c.target.system == 'win32-msvc')
def{avutil}: libul{avutil}

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

h{config}: in{config}
{
  FFMPEG_CONFIGURATION = "\"$c.target.system\""
  FFMPEG_LICENSE = "\"LGPL version 2.1 or later\""
  CONFIG_THIS_YEAR = 2024
  CONFIG_MEMORY_POISONING = 0

  autoconf.substitutions = HAVE_ALIGNED_MALLOC@HAVE__ALIGNED_MALLOC \
                           HAVE_AS_ARCHEXT_DOTPROD_DIRECTIVE@HAVE_AS_ARCHEXT_DOTPROD \
                           HAVE_AS_ARCHEXT_I8MM_DIRECTIVE@HAVE_AS_ARCHEXT_I8MM \
                           HAVE_AS_FUNC@HAVE_AS_FUNC_DIRECTIVE \
                           HAVE_EBP_AVAILABLE@HAVE_ASM_EBP \
                           HAVE_EBX_AVAILABLE@HAVE_ASM_EBX \
                           HAVE_FAST_FLOAT16@HAVE_F16C \
                           HAVE_INTRINSICS_NEON@HAVE_NEON \
                           HAVE_AS_OBJECT_ARCH@HAVE_AS_OBJECT_ARCH_DIRECTIVE \
                           HAVE_PTHREADS@HAVE_PTHREAD \
                           HAVE_SOCKLEN_T@socklen_t \
                           HAVE_THREADS@HAVE_PTHREAD

  HAVE_CDIO_PARANOIA_H = ($c.find_system_header("cdio/paranoia/paranoia.h") != [null])
  HAVE_DEV_VIDEO_BKTR_IOCTL_BT848_H = ($c.find_system_header("bktr/ioctl_bt848.h") != [null])
  HAVE_DEV_VIDEO_METEOR_IOCTL_METEOR_H = ($c.find_system_header("meteor/ioctl_bt848.h") != [null])
  HAVE_ES2_GL_H = ($c.find_system_header("GLES2/gl2.h") != [null])
  HAVE_GLXGETPROCADDRESS = ($c.find_system_header("GL/glx.h") != [null])
  HAVE_GSM_H = ($c.find_system_header("gsm.h") != [null])
  HAVE_OPENCV2_CORE_CORE_C_H = ($c.find_system_header("opencv2/core/core_c.h") != [null])
  HAVE_OPENGL_GL3_H = ($c.find_system_header("OpenGL/gl3.h") != [null])
  HAVE_OPENVINO2 = ($c.find_system_header("openvino/c/openvino.h") != [null])
  HAVE_STRUCT_MFXCONFIGINTERFACE = ($c.find_system_header("mfx/mfxvideo.h") != [null])
  HAVE_VAAPI_DRM = ($c.find_system_header("va/va_drm.h") != [null])
  HAVE_VAAPI_WIN32 = ($c.find_system_header("va/va_win32.h") != [null])
  HAVE_VAAPI_X11 = ($c.find_system_header("va/va_x11.h") != [null])
  HAVE_VALGRIND_VALGRIND_H = ($c.find_system_header("valgrind/valgrind.h") != [null])
  HAVE_VDPAU_X11 = ($c.find_system_header("vdpau/vdpau_x11.h") != [null])
  HAVE_XMLLINT = ($c.find_system_header("libxml/parser.h") != [null])

  # Win32
  HAVE_DPI_AWARENESS_CONTEXT = $tgt_win32
  HAVE_GETMODULEHANDLE = $tgt_win32
  HAVE_GETPROCESSAFFINITYMASK = $tgt_win32
  HAVE_GETPROCESSMEMORYINFO = $tgt_win32
  HAVE_GETPROCESSTIMES = $tgt_win32
  HAVE_GETSTDHANDLE = $tgt_win32
  HAVE_GETSYSTEMTIMEASFILETIME = $tgt_win32
  HAVE_IDXGIOUTPUT5 = $tgt_win32
  HAVE_IO_H = $tgt_win32
  HAVE_KBHIT = $tgt_win32
  HAVE_VIRTUALALLOC = $tgt_win32
  HAVE_W32THREADS = $tgt_win32
  HAVE_WGLGETPROCADDRESS = $tgt_win32
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions =+ "-I$out_pfx" "-I$src_pfx" -DHAVE_AV_CONFIG_H

# <stdatomic.h> compatibility
use_compat_atomics = [bool] true # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std > 17 (but handle case when not defined)
if ($use_compat_atomics)
{
  switch ($c.target.system)
  {
    case 'win32-msvc'
      c.poptions += "-I$out_pfx/compat/atomics/win32/" "-I$src_pfx/compat/atomics/win32/"
  }
}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avutil}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs
}
# workaround: <libavutil/md5.c> doesn't prefix with AV_
libavutil/obj{md5}:
{
  c.poptions =+ -DHAVE_FAST_UNALIGNED=1
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
