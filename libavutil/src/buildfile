using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}

impl_libs += $config

conditional_src  = $json.load($src_base/files.json)

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

./: lib{avutil}: \
            libul{avutil}: \
              libavutil/h{* -avconfig -ffversion} \
              libavutil/h{avconfig ffversion} \
              $impl_libs $intf_libs

libul{avutil}: compat/windows/{h c}{*} \
               compat/msvrt/{h c}{*} \
               compat/{h}{*} \
               : include = $tgt_win32

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
libua{avutil}: libavutil/impl_target{conditional-asm-obja}
libus{avutil}: libavutil/impl_target{conditional-asm-objs}
libul{avutil}: libavutil/impl_target{conditional-src}
libul{avutil}: libavutil/file{patch_exports.d}:
{
  include = $tgt_win32
  update = match
}

# these files are included, not built.
libul{avutil}: libavutil/aarch64/S{asm}: include = adhoc
libavutil/aarch64/S{asm}:
{{
  diag copy $>
  o = $path($>)
  s = "$src_base/$path.relative($o, $out_base)"
  cp $s $o
}}

libul{avutil}: libavutil/c{**_template}: include = adhoc
for t: libavutil/c{**_template}
{
  $t:
  {{
    diag copy $>
    o = $path($>)
    s = "$src_base/$path.relative($o, $out_base)"
    cp $s $o
  }}
}

libavutil/file{patch_exports.d}: libavutil/h{**}
{{
  o = [dir_path] $directory($>)
  all_headers = [paths] $path($<)

  HDRS = [paths] $o/emms.h

  for hdr: [paths] $all_headers
    sed -n -e 's|^(extern [ \S]*;)$|\1|gp' $hdr | set has_export
    if (!$empty($has_export))
      HDRS += [paths] $hdr
    end
  end

  diag patch $>

  # fix symbol importation on MSVC of global variables
  # manually deal with avpriv_emms_asm because it doesn't have 'extern'
  echo >$path($>)
  for hdr: [paths] ($HDRS)
    echo "      $path.relative($hdr, $src_base)"
    echo $hdr >>$path($>)
    sed -n -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr | set has_include
    if ($path.leaf($hdr) == 'emms.h')
      if ($empty($has_include))
        sed -i -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr
      end
      sed -i -e 's|^(void avpriv_emms_asm\(.*\);)$|av_export_avutil \1|gp' $hdr
    else
      # make sure 'internal.h' is included to access 'av_export_avutil'.
      if ($empty($has_include))
        sed -i -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr
      end
      # insert 'av_export_avutil' before any global and explicitly 'extern' variables
      sed -i -e 's|^(extern [ \S]*;)$|av_export_avutil \1|gp' $hdr
    end
  end
}}

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avutil

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
  case 'macos'
    sys_libs += -pthread
}
c.libs += $sys_libs

switch $c.target.system
{
  case 'win32-msvc'
  {
    # <stdatomic.h> compatibility
    use_compat_atomics = [bool] $tgt_win32 # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std <= 17 (but handle case when not defined)
    if ($use_compat_atomics)
    {
      c.poptions += "-I$src_pfx/compat/atomics/win32/"
      lib{avutil}: c.export.poptions += "-I$src_pfx/compat/atomics/win32/"
    }
  }
}

libs{avutil}: def{avutil}: include = ($c.target.system == 'win32-msvc')
def{avutil}: libul{avutil}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avutil}:
{
  c.export.poptions += "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
