using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

include ../libconfig/
config = ../libconfig/lib{config}
impl_libs += $config

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

define [see_through] impl_target: group

lib{avutil}: libul{avutil}: \
              libavutil/impl_target{avutil} \
              libavutil/h{** -avconfig -ffversion} \
              libavutil/h{avconfig ffversion} \
              $impl_libs $intf_libs

libul{avutil}: compat/windows/{h c}{*} \
               compat/msvrt/{h c}{*} \
               compat/{h}{*} \
               : include = $tgt_win32

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

all_asm = [strings] \
  '{"DISABLED HAVE_X86ASM":            "x86/cpuid.asm x86/emms.asm x86/fixed_dsp.asm x86/float_dsp.asm x86/imgutils.asm x86/lls.asm x86/tx_float.asm x86/x86inc.asm x86/x86util.asm"}' \
  '{"DISABLED HAVE_X86ASM CONFIG_PIXELUTILS":      "x86/pixelutils.asm"}' \
  '{"HAVE_AARCH64":           "aarch64/asm.S"}' \
  '{"HAVE_AARCH64 HAVE_NEON": "aarch64/float_dsp_neon.S aarch64/tx_float_neon.S"}' \
  '{"HAVE_ARM":               "arm/asm.S arm/float_dsp_vfp.S"}' \
  '{"HAVE_ARM HAVE_NEON":     "arm/float_dsp_neon.S"}' \
  '{"HAVE_RISCV":             "riscv/asm.S riscv/bswap_rvb.S riscv/fixed_dsp_rvv.S riscv/float_dsp_rvv.S"}'
all_srcs = [strings] \
  '{"SRC":                 "adler32.c aes.c aes_ctr.c ambient_viewing_environment.c audio_fifo.c avstring.c avsscanf.c base64.c blowfish.c bprint.c buffer.c cast5.c camellia.c channel_layout.c cpu.c crc.c csp.c des.c detection_bbox.c dict.c display.c dovi_meta.c downmix_info.c encryption_info.c error.c eval.c executor.c fifo.c file.c file_open.c float_dsp.c fixed_dsp.c frame.c hash.c hdr_dynamic_metadata.c hdr_dynamic_vivid_metadata.c hmac.c hwcontext.c iamf.c imgutils.c integer.c intmath.c lfg.c lls.c log.c log2_tab.c lzo.c mathematics.c mastering_display_metadata.c md5.c mem.c murmur3.c opt.c parseutils.c pixdesc.c pixelutils.c random_seed.c rational.c reverse.c rc4.c ripemd.c samplefmt.c sha.c sha512.c slicethread.c spherical.c stereo3d.c threadmessage.c time.c timecode.c timestamp.c tree.c twofish.c utils.c xga_font_data.c xtea.c tea.c tx.c tx_float.c tx_double.c tx_int32.c uuid.c version.c video_enc_params.c video_hint.c film_grain_params.c"}' \
  '{"CONFIG_CUDA":         "hwcontext_cuda.c"}' \
  '{"CONFIG_D3D11VA":      "hwcontext_d3d11va.c"}' \
  '{"CONFIG_D3D12VA":      "hwcontext_d3d12va.c"}' \
  '{"CONFIG_DXVA2":        "hwcontext_dxva2.c"}' \
  '{"CONFIG_LIBDRM":       "hwcontext_drm.c"}' \
  '{"CONFIG_MACOS_KPERF":  "macos_kperf.c"}' \
  '{"CONFIG_MEDIACODEC":   "hwcontext_mediacodec.c"}' \
  '{"CONFIG_OPENCL":       "hwcontext_opencl.c"}' \
  '{"CONFIG_QSV":          "hwcontext_qsv.c"}' \
  '{"CONFIG_VAAPI":        "hwcontext_vaapi.c"}' \
  '{"CONFIG_VDPAU":        "hwcontext_vdpau.c"}' \
  '{"CONFIG_VIDEOTOOLBOX": "hwcontext_videotoolbox.c"}' \
  '{"CONFIG_VULKAN":       "hwcontext_vulkan.c vulkan.c"}' \
  '{"HAVE_GNU_WINDRES":    "avutilres.rc"}' \
  '{"HAVE_MMX_INLINE HAVE_MMX_EXTERNAL HAVE_MM_EMPTY":       "x86/emms.c"}' \
  '{"DISABLED HAVE_X86ASM":         "x86/tx_float_init.c"}' \
  '{"HAVE_AARCH64":        "aarch64/cpu.c aarch64/float_dsp_init.c aarch64/tx_float_init.c"}' \
  '{"HAVE_ARM":            "arm/cpu.c arm/float_dsp_init_arm.c"}' \
  '{"HAVE_LOONG":          "loongarch/cpu.c"}' \
  '{"HAVE_MIPS":           "mips/float_dsp_mips.c mips/cpu.c"}' \
  '{"HAVE_PPC":            "ppc/cpu.c ppc/float_dsp_init.c"}' \
  '{"HAVE_RISCV":          "riscv/float_dsp_init.c riscv/fixed_dsp_init.c riscv/cpu.c"}' \
  '{"DISABLED HAVE_X86ASM CONFIG_PIXELUTILS":   "x86/pixelutils_init.c"}' \
  '{"DISABLED HAVE_X86 HAVE_X86ASM":            "x86/cpu.c x86/fixed_dsp_init.c x86/float_dsp_init.c x86/imgutils_init.c x86/lls_init.c"}'

libavutil/impl_target{avutil}: $config libavutil/h{**} libavutil/c{**}
{{
  o = [dir_path] $directory($>)
  n = $name($o)
  s = [dir_path] $src_base/$n
  c1 = [path] $path(h{$($config: out_base)/config_components.h})
  c2 = [path] $path(h{$($config: out_base)/config.h})
  d = "$o/av_conditional.files"

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c1 \
    | set -w ENABLED_COMPONENTS [string_set]
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c2 \
    | set -w ENABLED_CONFIGS [string_set]
  sed -n -e 's/^#define[ ]+(HAVE_[A-Z0-9_]+)[ ]+1/\1/p' $c2 \
    | set -w ENABLED_HAVE [string_set]

  ENABLED_GROUPS = [string_set] ( \
    $ENABLED_CONFIGS \
    $ENABLED_COMPONENTS \
    $ENABLED_HAVE \
    "SRC" \
    ($regex.find_match($ENABLED_CONFIGS, 'HAVE_ARM.*') ? "arm" : '') \
  )

  # append enabled sources
  SRCS = [paths]
  OBJS = [paths]
  for str: [strings] ($all_asm $all_srcs)
    pair = [json] $json.parse($str)
    echo $member_name($pair)  | set -w groups [strings]
    echo $member_value($pair) | set -w srcs [paths]
    for src: [paths] $srcs
      enabled = [bool] true
      for group: $groups
        if (!$ENABLED_GROUPS[$group])
          enabled = false
        end
      end
      if ($enabled)
        if ($extension($src) != 'asm')
          SRCS += [paths] $path.posix_representation($src)
        else
          ASM += [paths] $path.posix_representation($path.base($src).asma)
          ASM += [paths] $path.posix_representation($path.base($src).asms)
        end
      end
    end
  end

  HDRS += [paths] $filesystem.path_search('**.h', $s)
  SRCS_ALL = [paths] $filesystem.path_search('**.c', $s)

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'extracted source' \
    --target-extension-type 'asma=libua' \
    --target-extension-type 'asms=libus' \
    --format lines \
    --file "$d" \
    -- \
      echo ($SRCS $ASM) | tr ' ' '\n' >$d && \
      echo '' >>$d && echo $path.representation([dir_path] $o) >>$d

  diag src ($>)

  for file: [paths] ($HDRS $SRCS $SRCS_ALL)
    src = $path.posix_string($s/$file)
    dst = $path.posix_string($o/$file)
    mkdir --no-cleanup --parents $directory($dst)
    cp --no-cleanup $src $dst
  end
  # fix symbol importation on MSVC of global variables
  for file: [paths] $HDRS
    dst = $path.posix_string($o/$file)
    # insert 'av_export_avutil' before any global and explicitly 'extern' variables
    sed -i -e 's|^(extern [a-zA-Z ]* [\S]*;)$|av_export_avutil \1|gp' $dst
    sed -n -e 's|^av_export_avutil||p' $dst | set match
    # make sure 'internal.h' is included to access 'av_export_avutil'.
    if (!$empty($match))
      sed -i -e 's|^(#define AVUTIL_'"$ucase($name($dst))"'_H)$|\1\n#include <'"$n"'/internal.h>\n|g' $dst
    end
  end
  # not sure if this will work without (supposedly required) yasm
  if (!$empty($ASM))
    ml = $directory($effect($c.path))/ml64.exe
    for file: $ASM
      src = [path] $path.posix_string($s/$path.base($file).asm)
      dst = [path] $path.posix_string($o/$file)
      mkdir --no-cleanup --parents $o/$directory($file)
      $ml -nologo -quiet "-I$path.posix_string($src_base)" $c.poptions $c.coptions -Fo "$dst" -c "$src"
    end
  end
}}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avutil
objs{**}: c.poptions =+ -DCONFIG_SHARED

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.target.system)
{
  case 'win32-msvc'
  {
    c.coptions += -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS

    # <stdatomic.h> compatibility
    use_compat_atomics = [bool] $tgt_win32 # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std <= 17 (but handle case when not defined)
    if ($use_compat_atomics)
    {
      c.poptions += "-I$src_pfx/compat/atomics/win32/"
      lib{avutil}: c.export.poptions += "-I$src_pfx/compat/atomics/win32/"
    }
  }
}

libs{avutil}: def{avutil}: include = ($c.target.system == 'win32-msvc')
def{avutil}: libul{avutil}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avutil}:
{
  libavutil.pixelutils = $config.libavutil.pixelutils
  c.export.poptions = "-I$out_pfx" "-I$src_pfx" -DHAVE_AV_CONFIG_H
  c.export.libs = $intf_libs $sys_libs
}
# workaround: <libavutil/md5.c> doesn't prefix with AV_
# libavutil/obj{md5}:
# {
#   c.poptions =+ -DHAVE_FAST_UNALIGNED=1
# }

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
