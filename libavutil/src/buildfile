using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}

impl_libs += $config

tgt_win32 = [bool] ($c.target.system == 'win32-msvc')

./: lib{avutil}: libul{avutil}: libavutil/h{avconfig ffversion} $impl_libs $intf_libs

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
import config_h = libconfig%h{autoconf}
import config_asm = libconfig%file{config.asm}

[rule_hint=c] \
libul{avutil-meta}: $impl_libs $intf_libs
file{enabled_defines}: $config_h: update = match
libua{avutil}: enabled_source{avutil}: file{enabled_defines} libua{avutil-meta} json{files.json} \
                                       $config_h $config_asm libavutil/h{**}: \
                                       update = match

libul{avutil}: compat/windows/{h c}{*} \
               compat/msvrt/{h c}{*} \
               compat/{h}{*} \
               : include = $tgt_win32

# these c files are included, not built.
libul{avutil}: adhoc_source{avutil}: include = adhoc
adhoc_source{avutil}: libavutil/c{**_template} libavutil/aarch64/S{asm}

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avutil

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
  default
    sys_libs += -pthread -lm
}
c.libs += $sys_libs

switch $c.target.system
{
  case 'win32-msvc'
  {
    # <stdatomic.h> compatibility
    use_compat_atomics = [bool] $tgt_win32 # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std <= 17 (but handle case when not defined)
    if ($use_compat_atomics)
    {
      c.poptions += "-I$src_pfx/compat/atomics/win32/"
      lib{avutil}: c.export.poptions += "-I$src_pfx/compat/atomics/win32/"
    }
  }
}

# Export options.
#
lib{avutil}:
{
  c.export.poptions += "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
