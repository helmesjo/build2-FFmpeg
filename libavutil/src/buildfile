using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

include ../libconfig/
config = ../libconfig/lib{config}
impl_libs += $config

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

define [see_through] impl_target: group

lib{avutil}: libul{avutil}: \
              libavutil/impl_target{avutil} \
              libavutil/h{avconfig ffversion} \
              $impl_libs $intf_libs

libul{avutil}: libavutil/arm/{h c}{**}: include = ($cpu == 'arm')
libul{avutil}: libavutil/aarch64/{h c}{**}: include = ($cpu == 'aarch64')
libul{avutil}: libavutil/x86/{h c}{**}: include = $regex.match($cpu, 'i[3-6]86')

libul{avutil}: compat/windows/{h c}{*} \
               compat/msvrt/{h c}{*} \
               compat/{h}{*} \
               : include = $tgt_win32
libul{avutil}: libavutil/{h c}{macos_*}: include = $tgt_macos

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

makefile = "$src_base/libavutil/Makefile"
libavutil/impl_target{avutil}: $config file{$makefile}
{{
  o = [dir_path] $directory($>[0])
  s = [dir_path] $directory($makefile)
  c1 = [path] $path(h{$($config: out_base)/config_components.h})
  c2 = [path] $path(h{$($config: out_base)/config.h})
  d = "$o/av_conditional.files"

  cat $makefile \
    | set MAKEFILE [string_set]
  ## join all escaped lines
  MAKEFILE = [strings] ($regex.merge($MAKEFILE, '[ ]*\\\n[ ]*', ' '))

  # extract all enabled "groups" (CONFIG_XXX, HAVE_XXX)
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c1 \
    | set -w ENABLED_COMPONENTS [string_set]
  sed -n -e 's/^#define[ ]+(CONFIG_[A-Z0-9_]+)[ ]+1/\1/p' $c2 \
    | set -w ENABLED_CONFIGS [string_set]

  ENABLED_GROUPS = [string_set] ( \
    $ENABLED_CONFIGS \
    $ENABLED_COMPONENTS \
    "HEADERS" \
    "ARCH_HEADERS" \
    "OBJS" \
  )

  # extract all headers (including conditional and skipped)
  ## format as json: '{"<group>": "<files...>"}'
  echo $MAKEFILE \
    | sed -n -e 's/^([A-Z0-9_]+|HEADERS).*[ +]+=[[:space:]]+(.*\.h)/{"\1": "\2"}/p' \
    | set -n ALL_HDRS [strings]
  echo $MAKEFILE \
    | sed -n -e 's/^SKIPHEADERS-\$\(((CONFIG|HAVE)_[A-Z0-9_]+)\)[ +]+=[[:space:]]+(.*\.h)/{"\1": "\3"}/p' \
    | set -n COND_HDRS [strings]
  ALL_HDRS = $ALL_HDRS $COND_HDRS

  # extract all sources (including conditional and skipped)
  ## format as json: '{"<group>": "<files...>"}'
  echo $MAKEFILE \
    | sed -n -e 's/^([A-Z0-9_]+|OBJS).*[ +]+=[[:space:]]+(.*\.o)/{"\1": "\2"}/p' \
    | set -n ALL_SRCS [strings]

  echo $ALL_SRCS \
    | sed -n -e 's/\.o/.c/gp' \
    | set -n ALL_SRCS [strings]

  SRCS = [strings]
  # iterate files, check if enabled, extract extra files, append to list.
  for str: [strings] $ALL_HDRS $ALL_SRCS
    pair = [json_object] $json.parse($str)
    group = $member_name($pair)
    if ($ENABLED_GROUPS[$group])
      SRCS += [strings] $member_value($pair)
    end
  end

  depdb dyndep \
    --dyn-target \
    --target-cwd $o \
    --target-what 'conditional source files' \
    --format lines \
    --file "$d" \
    -- \
      echo ($SRCS) | tr ' ' '\n' >$d &!$d && \
      echo internal.h >>$d && \
      echo file_open.h >>$d

  diag src ($>)
  cat $d | for -n file
    cp $path.posix_string($s/$file) $path.posix_string($o/$file)
  end
}}

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avutil
# c.poptions = "-I$out_pfx" "-I$src_pfx" "-I$src_pfx/libavutil" -DBUILDING_avutil -D_ISOC11_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS -D_WIN32_WINNT=0x0600 -DPIC
# c.coptions = -nologo -std:c17 -Z7 -W3 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -O2 -utf-8 -showIncludes -Zs
objs{**}: c.poptions =+ -DCONFIG_SHARED

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += clock_gettime.lib stdatomic.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.target.system)
{
  case 'win32-msvc'
  {
    c.coptions += -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS

    # <stdatomic.h> compatibility
    use_compat_atomics = [bool] $tgt_win32 # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std <= 17 (but handle case when not defined)
    if ($use_compat_atomics)
    {
      c.poptions += "-I$src_pfx/compat/atomics/win32/"
      lib{avutil}: c.export.poptions += "-I$src_pfx/compat/atomics/win32/"
    }
  }
}

libs{avutil}: def{avutil}: include = ($c.target.system == 'win32-msvc')
def{avutil}: libul{avutil}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avutil}:
{
  libavutil.pixelutils = $config.libavutil.pixelutils
  c.export.poptions = "-I$out_pfx" "-I$src_pfx" -DHAVE_AV_CONFIG_H
  c.export.libs = $intf_libs $sys_libs
}
# workaround: <libavutil/md5.c> doesn't prefix with AV_
# libavutil/obj{md5}:
# {
#   c.poptions =+ -DHAVE_FAST_UNALIGNED=1
# }

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
