using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

# include ../libconfig/
import config = libconfig%lib{config}

impl_libs += $config

conditional_src  = [strings] \
  '{"ARCH_HEADERS":        "bswap.h intmath.h intreadwrite.h timer.h"} ' \
  '{"BUILT_HEADERS":       "avconfig.h ffversion.h"}' \
  '{"HEADERS":             "adler32.h aes.h aes_ctr.h ambient_viewing_environment.h attributes.h audio_fifo.h avassert.h avstring.h avutil.h base64.h blowfish.h bprint.h bswap.h buffer.h cast5.h camellia.h channel_layout.h common.h cpu.h crc.h csp.h des.h detection_bbox.h dict.h display.h dovi_meta.h downmix_info.h encryption_info.h error.h eval.h executor.h fifo.h file.h frame.h hash.h hdr_dynamic_metadata.h hdr_dynamic_vivid_metadata.h hmac.h hwcontext.h hwcontext_cuda.h hwcontext_d3d11va.h hwcontext_d3d12va.h hwcontext_drm.h hwcontext_dxva2.h hwcontext_qsv.h hwcontext_mediacodec.h hwcontext_opencl.h hwcontext_vaapi.h hwcontext_videotoolbox.h hwcontext_vdpau.h hwcontext_vulkan.h iamf.h imgutils.h intfloat.h intreadwrite.h lfg.h log.h lzo.h macros.h mathematics.h mastering_display_metadata.h md5.h mem.h motion_vector.h murmur3.h opt.h parseutils.h pixdesc.h pixelutils.h pixfmt.h random_seed.h rc4.h rational.h replaygain.h ripemd.h samplefmt.h sha.h sha512.h spherical.h stereo3d.h threadmessage.h time.h timecode.h timestamp.h tree.h twofish.h uuid.h version.h video_enc_params.h xtea.h tea.h tx.h film_grain_params.h video_hint.h"}' \
  '{"OBJS":                "aarch64/cpu.c aarch64/float_dsp_init.c aarch64/tx_float_init.c"}' \
  '{"OBJS":                "adler32.c aes.c aes_ctr.c ambient_viewing_environment.c audio_fifo.c avstring.c avsscanf.c base64.c blowfish.c bprint.c buffer.c cast5.c camellia.c channel_layout.c cpu.c crc.c csp.c des.c detection_bbox.c dict.c display.c dovi_meta.c downmix_info.c encryption_info.c error.c eval.c executor.c fifo.c file.c file_open.c float_dsp.c fixed_dsp.c frame.c hash.c hdr_dynamic_metadata.c hdr_dynamic_vivid_metadata.c hmac.c hwcontext.c iamf.c imgutils.c integer.c intmath.c lfg.c lls.c log.c log2_tab.c lzo.c mathematics.c mastering_display_metadata.c md5.c mem.c murmur3.c opt.c parseutils.c pixdesc.c pixelutils.c random_seed.c rational.c reverse.c rc4.c ripemd.c samplefmt.c sha.c sha512.c slicethread.c spherical.c stereo3d.c threadmessage.c time.c timecode.c timestamp.c tree.c twofish.c utils.c xga_font_data.c xtea.c tea.c tx.c tx_float.c tx_double.c tx_int32.c uuid.c version.c video_enc_params.c video_hint.c film_grain_params.c"}' \
  '{"OBJS":                "arm/cpu.c arm/float_dsp_init_arm.c"}' \
  '{"OBJS":                "loongarch/cpu.c"}' \
  '{"OBJS":                "mips/float_dsp_mips.c mips/cpu.c"}' \
  '{"OBJS":                "ppc/cpu.c ppc/float_dsp_init.c"}' \
  '{"OBJS":                "riscv/float_dsp_init.c riscv/fixed_dsp_init.c riscv/cpu.c"}' \
  '{"OBJS":                "x86/cpu.c x86/fixed_dsp_init.c x86/float_dsp_init.c x86/imgutils_init.c x86/lls_init.c"}' \
  '{"SKIPHEADERS":         "objc.h"}' \
  '{"CONFIG_CUDA":         "hwcontext_cuda.c"}' \
  '{"CONFIG_CUDA":         "hwcontext_cuda_internal.h cuda_check.h"}' \
  '{"CONFIG_D3D11VA":      "hwcontext_d3d11va.h"}' \
  '{"CONFIG_D3D11VA":      "hwcontext_d3d11va.c"}' \
  '{"CONFIG_D3D12VA":      "hwcontext_d3d12va.h"}' \
  '{"CONFIG_D3D12VA":      "hwcontext_d3d12va.c"}' \
  '{"CONFIG_DXVA2":        "hwcontext_dxva2.h"}' \
  '{"CONFIG_DXVA2":        "hwcontext_dxva2.c"}' \
  '{"CONFIG_LIBDRM":       "hwcontext_drm.c"}' \
  '{"CONFIG_MACOS_KPERF":  "macos_kperf.c"}' \
  '{"CONFIG_MEDIACODEC":   "hwcontext_mediacodec.c"}' \
  '{"CONFIG_OPENCL":       "hwcontext_opencl.h"}' \
  '{"CONFIG_OPENCL":       "hwcontext_opencl.c"}' \
  '{"CONFIG_PIXELUTILS":   "x86/pixelutils.asm"}' \
  '{"CONFIG_PIXELUTILS":   "x86/pixelutils_init.c"}' \
  '{"CONFIG_QSV":          "hwcontext_qsv.h"}' \
  '{"CONFIG_QSV":          "hwcontext_qsv.c"}' \
  '{"CONFIG_VAAPI":        "hwcontext_vaapi.h"}' \
  '{"CONFIG_VAAPI":        "hwcontext_vaapi.c"}' \
  '{"CONFIG_VDPAU":        "hwcontext_vdpau.h"}' \
  '{"CONFIG_VDPAU":        "hwcontext_vdpau.c"}' \
  '{"CONFIG_VIDEOTOOLBOX": "hwcontext_videotoolbox.h"}' \
  '{"CONFIG_VIDEOTOOLBOX": "hwcontext_videotoolbox.c"}' \
  '{"CONFIG_VULKAN":       "hwcontext_vulkan.h vulkan.h vulkan_functions.h vulkan_loader.h"}' \
  '{"CONFIG_VULKAN":       "hwcontext_vulkan.c vulkan.c"}' \
  '{"HAVE_CUDA_H":         "hwcontext_cuda.h"}' \
  '{"HAVE_GNU_WINDRES":    "avutilres.rc"}' \
  '{"HAVE_X86ASM":         "x86/tx_float_init.c"} ' \
  '{"ARCH_HEADERS":        "bswap.h intmath.h intreadwrite.h timer.h"}' \
  '{"BUILT_HEADERS":       "avconfig.h ffversion.h"}' \
  '{"HAVE_ALTIVEC":        "ppc/float_dsp_altivec.c"}' \
  '{"HAVE_NEON":           "aarch64/float_dsp_neon.S aarch64/tx_float_neon.S"}' \
  '{"HAVE_NEON":           "arm/float_dsp_init_neon.c arm/float_dsp_neon.S"}' \
  '{"HAVE_RVV":            "riscv/float_dsp_rvv.S riscv/fixed_dsp_rvv.S"}' \
  '{"HAVE_VFP":            "arm/float_dsp_init_vfp.c arm/float_dsp_vfp.S"} ' \
  '{"HAVE_VSX":            "ppc/float_dsp_vsx.c"}' \
  '{"HAVE_X86ASM":         "x86/cpuid.asm $(EMMS_OBJS__yes_) x86/fixed_dsp.asm x86/float_dsp.asm x86/imgutils.asm x86/lls.asm x86/tx_float.asm"}' \
  '{"HEADERS":             "adler32.h aes.h aes_ctr.h ambient_viewing_environment.h attributes.h audio_fifo.h avassert.h avstring.h avutil.h base64.h blowfish.h bprint.h bswap.h buffer.h cast5.h camellia.h channel_layout.h common.h cpu.h crc.h csp.h des.h detection_bbox.h dict.h display.h dovi_meta.h downmix_info.h encryption_info.h error.h eval.h executor.h fifo.h file.h frame.h hash.h hdr_dynamic_metadata.h hdr_dynamic_vivid_metadata.h hmac.h hwcontext.h hwcontext_cuda.h hwcontext_d3d11va.h hwcontext_d3d12va.h hwcontext_drm.h hwcontext_dxva2.h hwcontext_qsv.h hwcontext_mediacodec.h hwcontext_opencl.h hwcontext_vaapi.h hwcontext_videotoolbox.h hwcontext_vdpau.h hwcontext_vulkan.h iamf.h imgutils.h intfloat.h intreadwrite.h lfg.h log.h lzo.h macros.h mathematics.h mastering_display_metadata.h md5.h mem.h motion_vector.h murmur3.h opt.h parseutils.h pixdesc.h pixelutils.h pixfmt.h random_seed.h rc4.h rational.h replaygain.h ripemd.h samplefmt.h sha.h sha512.h spherical.h stereo3d.h threadmessage.h time.h timecode.h timestamp.h tree.h twofish.h uuid.h version.h video_enc_params.h xtea.h tea.h tx.h film_grain_params.h video_hint.h"}' \
  '{"OBJS":                "aarch64/cpu.c aarch64/float_dsp_init.c aarch64/tx_float_init.c"}' \
  '{"OBJS":                "adler32.c aes.c aes_ctr.c ambient_viewing_environment.c audio_fifo.c avstring.c avsscanf.c base64.c blowfish.c bprint.c buffer.c cast5.c camellia.c channel_layout.c cpu.c crc.c csp.c des.c detection_bbox.c dict.c display.c dovi_meta.c downmix_info.c encryption_info.c error.c eval.c executor.c fifo.c file.c file_open.c float_dsp.c fixed_dsp.c frame.c hash.c hdr_dynamic_metadata.c hdr_dynamic_vivid_metadata.c hmac.c hwcontext.c iamf.c imgutils.c integer.c intmath.c lfg.c lls.c log.c log2_tab.c lzo.c mathematics.c mastering_display_metadata.c md5.c mem.c murmur3.c opt.c parseutils.c pixdesc.c pixelutils.c random_seed.c rational.c reverse.c rc4.c ripemd.c samplefmt.c sha.c sha512.c slicethread.c spherical.c stereo3d.c threadmessage.c time.c timecode.c timestamp.c tree.c twofish.c utils.c xga_font_data.c xtea.c tea.c tx.c tx_float.c tx_double.c tx_int32.c uuid.c version.c video_enc_params.c video_hint.c film_grain_params.c"}' \
  '{"OBJS":                "arm/cpu.c arm/float_dsp_init_arm.c"}' \
  '{"OBJS":                "loongarch/cpu.c"}' \
  '{"OBJS":                "mips/float_dsp_mips.c mips/cpu.c"}' \
  '{"OBJS":                "ppc/cpu.c ppc/float_dsp_init.c"}' \
  '{"OBJS":                "riscv/float_dsp_init.c riscv/fixed_dsp_init.c riscv/cpu.c"}' \
  '{"OBJS":                "x86/cpu.c x86/fixed_dsp_init.c x86/float_dsp_init.c x86/imgutils_init.c x86/lls_init.c"}' \
  '{"SKIPHEADERS":         "objc.h"}'

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

./: lib{avutil}: \
            libul{avutil}: \
              libavutil/h{* -avconfig -ffversion} \
              libavutil/h{avconfig ffversion} \
              $impl_libs $intf_libs

libul{avutil}: compat/windows/{h c}{*} \
               compat/msvrt/{h c}{*} \
               compat/{h}{*} \
               : include = $tgt_win32

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
libua{avutil}: libavutil/impl_target{conditional-asm-obja}: include = $tgt_win32
libus{avutil}: libavutil/impl_target{conditional-asm-objs}: include = $tgt_win32
libul{avutil}: libavutil/impl_target{conditional-src}
libul{avutil}: libavutil/file{patch_exports.d}:
{
  include = $tgt_win32
  update = match
}

# these files are included, not built.
libul{avutil}: libavutil/aarch64/S{asm}: include = adhoc
libavutil/aarch64/S{asm}:
{{
  diag copy $>
  o = $path($>)
  s = "$src_base/$path.relative($o, $out_base)"
  cp $s $o
}}

libul{avutil}: libavutil/c{**_template}: include = adhoc
for t: libavutil/c{**_template}
{
  $t:
  {{
    diag copy $>
    o = $path($>)
    s = "$src_base/$path.relative($o, $out_base)"
    cp $s $o
  }}
}

libavutil/file{patch_exports.d}: libavutil/h{**}
{{
  o = [dir_path] $directory($>)
  all_headers = [paths] $path($<)

  HDRS = [paths] $o/emms.h

  for hdr: [paths] $all_headers
    sed -n -e 's|^(extern [a-zA-Z ]* [\S]*;)$|\1|gp' $hdr | set has_export
    if (!$empty($has_export))
      HDRS += [paths] $hdr
    end
  end

  diag patch $>

  # fix symbol importation on MSVC of global variables
  # manually deal with avpriv_emms_asm because it doesn't have 'extern'
  echo >$path($>)
  for hdr: [paths] ($HDRS)
    echo "      $path.relative($hdr, $src_base)"
    echo $hdr >>$path($>)
    sed -n -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr | set has_include
    if ($path.leaf($hdr) == 'emms.h')
      if ($empty($has_include))
        sed -i -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr
      end
      sed -i -e 's|^(void avpriv_emms_asm\(.*\);)$|av_export_avutil \1|gp' $hdr
    else
      # make sure 'internal.h' is included to access 'av_export_avutil'.
      if ($empty($has_include))
        sed -i -e 's|^(#define AVUTIL_'"$ucase($name($hdr))"'_H)$|\1\n#include <libavutil/internal.h>|g' $hdr
      end
      # insert 'av_export_avutil' before any global and explicitly 'extern' variables
      sed -i -e 's|^(extern [a-zA-Z ]* [\S]*;)$|av_export_avutil \1|gp' $hdr
    end
  end
}}

libavutil/h{avconfig}: in{avconfig}
{
  autoconf.prefix = AV_
}

[rule_hint=version.in] \
libavutil/h{ffversion}: in{ffversion} $src_root/manifest

# Build options.
#
out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avutil

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
  case 'macos'
    sys_libs += -pthread
}
c.libs += $sys_libs

switch $c.target.system
{
  case 'win32-msvc'
  {
    c.coptions += -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS

    # <stdatomic.h> compatibility
    use_compat_atomics = [bool] $tgt_win32 # ($c.find_system_header("stdatomic.h") == [null]) # NEED TO CHECK $c.std <= 17 (but handle case when not defined)
    if ($use_compat_atomics)
    {
      c.poptions += "-I$src_pfx/compat/atomics/win32/"
      lib{avutil}: c.export.poptions += "-I$src_pfx/compat/atomics/win32/"
    }
  }
  case 'darwin'
  {
    c.coptions += -Wno-implicit-function-declaration \
                  -Wno-deprecated-declarations \
                  -Wno-pointer-sign \
                  -Wno-parentheses \
                  -Wno-implicit-const-int-float-conversion \
                  -Wno-deprecated-pragma \
                  -Wno-switch
    c.loptions += -Wl,-dynamic,-search_paths_first
  }
}

libs{avutil}: def{avutil}: include = ($c.target.system == 'win32-msvc')
def{avutil}: libul{avutil}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Export options.
#
lib{avutil}:
{
  c.export.poptions += "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avutil}: bin.lib.version = "-$version.project_id"
else
  lib{avutil}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
